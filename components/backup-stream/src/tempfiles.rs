// Copyright 2023 TiKV Project Authors. Licensed under Apache-2.0.
//! This mod provides the ability of managing the temporary files generated by
//! log backup.

use std::{
    collections::HashMap,
    fs::File as SyncOsFile,
    io::Read,
    path::{Path, PathBuf},
    pin::Pin,
    sync::{
        atomic::{AtomicU8, AtomicUsize, Ordering},
        Arc, Mutex as BlockMutex,
    },
    task::{ready, Context, Poll},
};

use futures::{Future, FutureExt, TryFutureExt};
use kvproto::brpb::CompressionType;
use tikv_util::stream::block_on_external_io;
use tokio::{
    fs::File as OsFile,
    io::{AsyncRead, AsyncReadExt, AsyncWrite, BufWriter},
};

use crate::{
    annotate,
    errors::Result,
    utils::{CompressionWriter, ZstdCompressionWriter},
};

#[derive(Debug)]
pub struct Config {
    /// When the in memory bytes reaches this, start to flush files into disk at
    /// background.
    pub soft_max: usize,
    /// When the in memory bytes reaches this, abort the log backup task.
    pub hard_max: usize,
    /// The base directory for swapping out files.
    pub swap_files: PathBuf,
    /// The compression type used for compression.
    pub artificate_compression: CompressionType,
    /// Prevent files with size less than this being swapped out.
    /// We perfer to swap larger files for reducing IOps.
    pub swap_out_threashold: usize,
}

pub struct TempFilePool {
    cfg: Config,
    current: AtomicUsize,
    files: BlockMutex<FileSet>,

    override_swapout: Option<Box<dyn Fn(&Path) -> Box<dyn AsyncWrite> + Send + Sync + 'static>>,
}

impl std::fmt::Debug for TempFilePool {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("TempFilePool")
            .field("cfg", &self.cfg)
            .field("current", &self.current)
            .finish()
    }
}

#[derive(Default)]
struct File {
    content: Arc<BlockMutex<Content>>,
    writer_count: Arc<AtomicU8>,
}

enum PersistentFile {
    Compressed(ZstdCompressionWriter),
    Plain(OsFile),
    Dynamic(Pin<Box<dyn AsyncWrite + Send + 'static>>),
}

impl std::fmt::Debug for PersistentFile {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Compressed(_) => f.debug_tuple("Compressed").finish(),
            Self::Plain(_) => f.debug_tuple("Plain").finish(),
            Self::Dynamic(_) => f.debug_tuple("Dynamic").finish(),
        }
    }
}

#[derive(Default, Debug)]
struct Content {
    in_mem: Vec<u8>,
    external_file: Option<PersistentFile>,

    /// self.mem[0..written] has been written to out file.
    written: usize,
}

#[derive(Debug)]
pub struct ForWrite {
    content: Arc<BlockMutex<Content>>,

    shared: Arc<TempFilePool>,
    rel_path: PathBuf,

    ref_counter: Arc<AtomicU8>,
    done: bool,
}

#[derive(Debug)]
pub struct ForRead {
    content: Arc<BlockMutex<Content>>,

    myfile: Option<OsFile>,
    read: usize,
}

#[derive(Default)]
struct FileSet {
    items: HashMap<PathBuf, File>,
}

impl TempFilePool {
    pub fn new(cfg: Config) -> Result<Self> {
        std::fs::create_dir_all(&cfg.swap_files)?;

        let this = Self {
            cfg,
            current: AtomicUsize::new(0usize),
            files: BlockMutex::default(),

            override_swapout: None,
        };
        Ok(this)
    }

    pub fn open(self: &Arc<Self>, p: &Path) -> ForWrite {
        let mut fs = self.files.lock().unwrap();
        let f = fs.items.entry(p.to_owned()).or_default();
        let fr = ForWrite {
            content: Arc::clone(&f.content),
            shared: Arc::clone(self),
            ref_counter: Arc::clone(&f.writer_count),
            rel_path: p.to_owned(),
            done: false,
        };
        f.writer_count.fetch_add(1, Ordering::SeqCst);
        fr
    }

    /// Open a file reference for reading.
    pub fn open_for_read(&self, p: &Path) -> std::io::Result<ForRead> {
        use std::io::{Error, ErrorKind};

        let fs = self.files.lock().unwrap();
        let f = fs.items.get(p);
        if f.is_none() {
            return Err(Error::new(
                ErrorKind::NotFound,
                format!("file {} not found", p.display()),
            ));
        }
        let f = f.unwrap();
        if f.writer_count.load(Ordering::SeqCst) > 0 {
            // NOTE: the current implementation doesn't allow us to write when there are
            // readers, because once the writter swapped out the file, the
            // reader may not notice that.
            return Err(Error::new(
                ErrorKind::Other,
                "open_for_read isn't allowed when there are concurrent writing.",
            ));
        }
        let st = f.content.lock().unwrap();
        let myfile = if st.external_file.is_some() {
            Some(self.open_relative(p)?)
        } else {
            None
        };
        Ok(ForRead {
            content: Arc::clone(&f.content),
            myfile,
            read: 0,
        })
    }

    pub fn config(&self) -> &Config {
        &self.cfg
    }

    /// Create a file for writting.
    /// This function is synchronous so we can call it easier in the polling
    /// context. (Anyway, it is really hard to call an async function in the
    /// polling context.)
    fn create_relative(&self, p: &Path) -> std::io::Result<PersistentFile> {
        use std::io::{Error, ErrorKind};
        let file = OsFile::from_std(SyncOsFile::create(self.cfg.swap_files.join(p))?);
        let pfile = match self.cfg.artificate_compression {
            CompressionType::Unknown => PersistentFile::Plain(file),
            CompressionType::Zstd => {
                PersistentFile::Compressed(ZstdCompressionWriter::new(BufWriter::new(file)))
            }
            _ => Err(Error::new(
                ErrorKind::Unsupported,
                format!(
                    "the compression {:?} isn't supported.",
                    self.cfg.artificate_compression
                ),
            ))?,
        };
        Ok(pfile)
    }

    /// Open a file by a relative path.
    /// This will open a raw OS file for reading. The file content may be
    /// compressed if the configuration requires.
    fn open_relative(&self, p: &Path) -> std::io::Result<OsFile> {
        let file = SyncOsFile::open(self.cfg.swap_files.join(p))?;
        Ok(OsFile::from_std(file))
    }
}

impl ForWrite {
    pub fn path(&self) -> &Path {
        &self.rel_path
    }

    pub async fn done(&mut self) -> Result<()> {
        self.done = true;
        self.ref_counter.fetch_sub(1, Ordering::SeqCst);
        let st_lock = self.content.clone();
        tokio::task::spawn_blocking(move || {
            let mut st = st_lock.lock().unwrap();
            if let Some(PersistentFile::Compressed(c)) = &mut st.external_file {
                tokio::runtime::Handle::current().block_on(Pin::new(c).done())?;
            }
            Result::Ok(())
        })
        .map_err(|err| annotate!(err, "joining the background `done` job"))
        .await??;
        Ok(())
    }
}

impl Content {
    fn poll_swap_out_unpin(
        &mut self,
        cx: &mut Context<'_>,
        shared: &TempFilePool,
        to_path: &Path,
    ) -> Poll<std::io::Result<()>> {
        loop {
            let to_write = &self.in_mem[self.written..];
            if to_write.is_empty() {
                self.in_mem = vec![];
                shared.current.fetch_sub(self.written, Ordering::SeqCst);
                self.written = 0;
                return Ok(()).into();
            }
            if self.external_file.is_none() {
                self.external_file = Some(shared.create_relative(to_path)?);
            }
            let ext_file = Pin::new(self.external_file.as_mut().unwrap());
            let n = ready!(ext_file.poll_write(cx, to_write))?;
            println!("poll_writing: {} => {}", to_write.escape_ascii(), n);
            if n == 0 {
                return Err(std::io::Error::new(
                    std::io::ErrorKind::WriteZero,
                    "during swapping out file",
                ))
                .into();
            }
            self.written += n;
        }
    }
}

impl AsyncWrite for ForWrite {
    fn poll_write(
        self: Pin<&mut Self>,
        cx: &mut Context<'_>,
        buf: &[u8],
    ) -> Poll<std::io::Result<usize>> {
        use std::io::{Error as IoErr, ErrorKind};
        if self.done {
            return Err(IoErr::new(
                ErrorKind::BrokenPipe,
                "the write part has been closed",
            ))
            .into();
        }

        let mut stat = self.content.lock().unwrap();

        let mem_use = self.shared.current.load(Ordering::SeqCst);
        let in_mem_exceeds_quota = stat.in_mem.len() > self.shared.cfg.swap_out_threashold
            && mem_use > self.shared.cfg.soft_max;
        let already_exist = stat.in_mem.len() > 4096 && stat.external_file.is_some();
        let swapping = stat.written > 0;
        let should_swap_out = in_mem_exceeds_quota || already_exist || swapping;
        if should_swap_out {
            ready!(stat.poll_swap_out_unpin(cx, &self.shared, &self.rel_path))?;
        }

        if mem_use > self.shared.cfg.hard_max {
            return Err(IoErr::new(
                ErrorKind::OutOfMemory,
                format!(
                    "the memory usage {} exceeds the quota {}",
                    mem_use, self.shared.cfg.hard_max
                ),
            ))
            .into();
        }

        self.shared.current.fetch_add(buf.len(), Ordering::SeqCst);
        stat.in_mem.extend(buf.iter());
        Ok(buf.len()).into()
    }

    fn poll_flush(
        self: Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<std::result::Result<(), std::io::Error>> {
        let mut stat = self.content.lock().unwrap();
        if let Some(f) = &mut stat.external_file {
            ready!(Pin::new(f).poll_flush(cx))?;
        }
        Ok(()).into()
    }

    fn poll_shutdown(
        self: Pin<&mut Self>,
        cx: &mut std::task::Context<'_>,
    ) -> std::task::Poll<std::result::Result<(), std::io::Error>> {
        let mut stat = self.content.lock().unwrap();
        if let Some(f) = &mut stat.external_file {
            ready!(Pin::new(f).poll_shutdown(cx))?;
        }
        Ok(()).into()
    }
}

impl Drop for ForWrite {
    fn drop(&mut self) {
        if !self.done {
            self.ref_counter.fetch_sub(1, Ordering::SeqCst);
        }
    }
}

impl ForRead {
    pub async fn len(&self) -> Result<u64> {
        let len_in_file = if let Some(mf) = &self.myfile {
            mf.metadata().await?.len()
        } else {
            0
        };
        let st = self.content.lock().unwrap();
        let len_in_mem = st.in_mem.len() - st.written;
        Ok(len_in_file + len_in_mem as u64)
    }
}

impl AsyncRead for ForRead {
    fn poll_read(
        self: Pin<&mut Self>,
        cx: &mut Context<'_>,
        buf: &mut tokio::io::ReadBuf<'_>,
    ) -> Poll<std::io::Result<()>> {
        let this = self.get_mut();
        if this.read == 0 && this.myfile.is_some() {
            let old = buf.remaining();
            let ext_file = Pin::new(this.myfile.as_mut().unwrap());
            ready!(ext_file.poll_read(cx, buf))?;
            if buf.remaining() != old {
                return Ok(()).into();
            }
        }
        let st = this.content.lock().unwrap();
        let rem = buf.remaining();
        let fill_len = Ord::min(st.in_mem.len() - this.read, rem);
        let to_fill = &st.in_mem[this.read..this.read + fill_len];
        buf.put_slice(to_fill);
        this.read += fill_len;
        Ok(()).into()
    }
}

impl AsyncWrite for PersistentFile {
    fn poll_write(
        self: Pin<&mut Self>,
        cx: &mut Context<'_>,
        buf: &[u8],
    ) -> Poll<std::result::Result<usize, std::io::Error>> {
        match self.get_mut() {
            PersistentFile::Compressed(c) => Pin::new(c).poll_write(cx, buf),
            PersistentFile::Plain(f) => Pin::new(f).poll_write(cx, buf),
            PersistentFile::Dynamic(d) => d.as_mut().poll_write(cx, buf),
        }
    }

    fn poll_flush(
        self: Pin<&mut Self>,
        cx: &mut Context<'_>,
    ) -> Poll<std::result::Result<(), std::io::Error>> {
        match self.get_mut() {
            PersistentFile::Compressed(c) => Pin::new(c).poll_flush(cx),
            PersistentFile::Plain(f) => Pin::new(f).poll_flush(cx),
            PersistentFile::Dynamic(d) => d.as_mut().poll_flush(cx),
        }
    }

    fn poll_shutdown(
        self: Pin<&mut Self>,
        cx: &mut Context<'_>,
    ) -> Poll<std::result::Result<(), std::io::Error>> {
        match self.get_mut() {
            PersistentFile::Compressed(c) => Pin::new(c).poll_shutdown(cx),
            PersistentFile::Plain(f) => Pin::new(f).poll_shutdown(cx),
            PersistentFile::Dynamic(d) => d.as_mut().poll_shutdown(cx),
        }
    }
}

fn block_on_current_rt<T>(f: impl Future<Output = T>) -> T {
    match tokio::runtime::Handle::try_current() {
        Ok(rt) => tokio::task::block_in_place(|| rt.block_on(f)),
        Err(_) => block_on_external_io(f),
    }
}

#[cfg(test)]
mod test {
    use std::{io::Read, sync::Arc};

    use kvproto::brpb::CompressionType;
    use tokio::io::{AsyncReadExt, AsyncWriteExt};

    use super::{Config, TempFilePool};

    fn rt_for_test() -> tokio::runtime::Runtime {
        tokio::runtime::Builder::new_multi_thread()
            .worker_threads(1)
            .enable_all()
            .build()
            .unwrap()
    }

    fn simple_pool(soft_max: usize) -> Arc<TempFilePool> {
        Arc::new(
            TempFilePool::new(Config {
                soft_max,
                hard_max: 99999999999,
                swap_files: std::env::temp_dir().join(format!("{}", std::process::id())),
                artificate_compression: CompressionType::Unknown,
                swap_out_threashold: 0,
            })
            .unwrap(),
        )
    }

    #[test]
    fn test_read() {
        let pool = simple_pool(255);
        let mut f = pool.open("hello.txt".as_ref());
        let rt = rt_for_test();
        rt.block_on(f.write(b"Hello, world.")).unwrap();
        drop(f);
        let mut cur = pool.open_for_read("hello.txt".as_ref()).unwrap();
        rt.block_on(rt.spawn(async move {
            let mut buf = [0u8; 6];
            assert_eq!(cur.read(&mut buf[..]).await.unwrap(), 6);
            assert_eq!(&buf, b"Hello,");
            let mut buf = [0u8; 6];
            assert_eq!(
                cur.read(&mut buf[..]).await.unwrap(),
                6,
                "{}",
                buf.escape_ascii()
            );
            assert_eq!(&buf, b" world");
        }))
        .unwrap();
    }

    #[test]
    fn test_swapout() {
        let pool = simple_pool(30);
        let mut f = pool.open("world.txt".as_ref());
        let rt = rt_for_test();
        rt.block_on(f.write(b"Once the word count...")).unwrap();
        rt.block_on(f.write(b"Reachs 30. The content of files shall be swaped out to the disk."))
            .unwrap();
        rt.block_on(f.write(b"Isn't it? This swap will be finished in this call."))
            .unwrap();
        rt.block_on(f.done()).unwrap();
        let mut cur = pool.open_for_read("world.txt".as_ref()).unwrap();
        let mut buf = vec![];
        rt.block_on(cur.read_to_end(&mut buf)).unwrap();
        let excepted = b"Once the word count...Reachs 30. The content of files shall be swaped out to the disk.Isn't it? This swap will be finished in this call.";
        assert_eq!(
            excepted,
            buf.as_slice(),
            "\n{}\n ## \n{}",
            excepted.escape_ascii(),
            buf.escape_ascii()
        );

        let mut local_file = pool
            .open_relative("world.txt".as_ref())
            .unwrap()
            .try_into_std()
            .unwrap();
        buf.clear();
        local_file.read_to_end(&mut buf).unwrap();
        assert_eq!(
            excepted,
            buf.as_slice(),
            "\n{}\n ## \n{}",
            excepted.escape_ascii(),
            buf.escape_ascii()
        );
    }
}
